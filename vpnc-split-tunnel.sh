#!/bin/sh

# =========== Overview ====================================
#
# Basic script to be used inconjunction vpnc-scipt (comes with
# the installation of vpnc). This script also leverages dnsmasq 
# to allow for you to define specific domains to query over the 
# VPN connection while forwarding the rest of your dns queries
# to your local DNS.  This allows for a truely transparent
# split tunnel experience.
#

# =========== Installation ====================================
#
# Modify the variables down below under the "Script Variable"
# section to reflect your configuration. Drop the script into 
# /etc/vpnc/ and reference it from your conf file with the 
# "Script" variable.  Then just start vpnc as you normally 
# would. 
#

# =========== Origin ====================================
#
# Original inspiration derived from the following source:
#   Antonio Borneo
#   borneo.antonio@gmail.com
#   http://svn.unix-ag.uni-kl.de/vpnc/branches/vpnc-nortel/split_tunnel.txt
# 

# =========== Author ====================================
#
# Script created/maintained by:
#   Robert Hernandez
#   l2ol33rt@gmail.com
#

# =========== Functions ====================================

# Move the dnsmsaq configs around (needs work)
cleanup_configs ()
{
    if [ -z "$debug" ]; then
        if [ -e ${DNSMASQ_CONF_BACKUP} ]; then
            mv -f ${DNSMASQ_CONF_BACKUP} ${DNSMASQ_CONF}
        fi

        if [ -e ${DNSMASQ_RESOLV_CONF} ]; then
            rm -f ${DNSMASQ_RESOLV_CONF}
        fi
    else
        echo -e "\nWill move ${DNSMASQ_CONF_BACKUP} to ${DNSMASQ_CONF} if it exists\n"
        echo -e "Will remove ${DNSMASQ_RESOLV_CONF} if it exists\n"
    fi
}

# Make the dnsmasq config and start the service
make_dnsmasq ()
{
    # Set VPN DNS Servers
    masq_string="#@VPNC_GENERATED@ -- this file is generated by vpnc\n"
    for DNS_SERVER in ${INTERNAL_IP4_DNS}; do
        masq_string="${masq_string}server=$(echo "/"${CISCO_DEF_DOMAIN} | tr ' ' '/')/${DNS_SERVER}\n"
    done
    
    # Set Listener-Addresses
    for LISTENER in ${DNSMASQ_LISTEN}; do
        masq_string="${masq_string}listen-address=${LISTENER}\n"
    done
    masq_string="${masq_string}bind-interfaces\nresolv-file=${DNSMASQ_RESOLV_CONF}"
        
    if [ -z "$debug" ]; then
        if [ -e ${DNSMASQ_CONF} ]; then
            cp ${DNSMASQ_CONF} ${DNSMASQ_CONF_BACKUP}
        fi
        if [ -e ${RESOLV_CONF} ]; then
            cp ${RESOLV_CONF} ${DNSMASQ_RESOLV_CONF}
        fi
        cat > ${DNSMASQ_CONF} << EOF
$(echo -e $masq_string)
EOF
        service dnsmasq restart
        service dnsmasq status
        if [ "$?" -ne "0" ];then
            echo "dnsmasq could not be started, stopping $reason"
            cleanup_configs
            exit 1
        fi
    else
        echo -e "\nWill backup ${DNSMASQ_CONF} to ${DNSMASQ_CONF_BACKUP} if it exists\n"
        echo -e "Will copy ${RESOLV_CONF} to ${DNSMASQ_RESOLV_CONF} if it exists\n" 
        echo -e "Write the following to ${DNSMASQ_CONF}:"
        echo -e $masq_string"\n"
    fi 
}

# Add IP to the list of split tunnel
add_ip ()
{
    if [ -z "$debug" ];then 
        # Set up the address and netmask
        export CISCO_SPLIT_INC_${CISCO_SPLIT_INC}_ADDR=$1
        export CISCO_SPLIT_INC_${CISCO_SPLIT_INC}_MASKLEN=$2
    else
        echo "CISCO_SPLIT_INC_${CISCO_SPLIT_INC}_ADDR=${1}"
        echo "CISCO_SPLIT_INC_${CISCO_SPLIT_INC}_MASKLEN=${2}"
    fi

    # Incremement the split count
    CISCO_SPLIT_INC=$(($CISCO_SPLIT_INC + 1))
}

# Lets make the VPN connection
do_connect ()
{
    make_dnsmasq

    for subnet in ${SUBNET_LIST}; do
        subnet=($(echo $subnet | tr "/" " "))
        len=${#subnet[@]}
        if [ "$len" -lt "3" ]; then
            if [ "$len" -eq "1" ]; then
                add_ip ${subnet[0]} "32"
            else
                add_ip ${subnet[0]} ${subnet[1]}
            fi
        else
            echo "IP string incorrect"
        fi
    done
}

# Lets disconnect the VPN connection
do_disconnect ()
{
    if [ -z "$debug" ]; then
        service dnsmasq stop
        service dnsmasq status
        if [ "$?" -ne "3" ];then
            echo "dnsmasq could not be stopped, still continuing with $reason"
        fi
    else
        echo -e "\nStop the dnsmasq service"
    fi
    
    cleanup_configs
}

# =========== script (variable) setup ====================================


# ===== Overrides =====

# Initialize empty split tunnel list
CISCO_SPLIT_INC=0

# Possible set from VPN server. Comment out to manually set
# or override DNS servers beyond the VPN
#INTERNAL_IP4_DNS="192.168.1.1 192.168.1.2"

# List of domains beyond VPN tunnel. Comment out to manually
# set or override, space delimited
#CISCO_DEF_DOMAIN="test.local test2.local"

# List of Subnet/CIDR beyond VPN tunnel, space delimited
# by default the script will just add the VPN subnet
# SUBNET_LIST="192.168.0.1/24 192.168.1.1/24"  
SUBNET_LIST="${INTERNAL_IP4_NETADDR}/${INTERNAL_IP4_NETMASKLEN}"

# ===== Script Specific =====

# Resolv.conf location
RESOLV_CONF="/etc/resolv.conf"

# DNSMASQ config locations
DNSMASQ_CONF="/etc/dnsmasq.conf"
DNSMASQ_RESOLV_CONF="/etc/resolv.dnsmasq.conf"
DNSMASQ_CONF_BACKUP="/var/run/vpnc/dnsmasq.conf"
DNSMASQ_LISTEN="127.0.0.1"
DNSMASQ_BIN=$(which dnsmasq)

if [ "$?" -ne "0" ];then
    echo "dnsmasq not installed, exiting now"
    exit 1
fi

# Check flags being passed in
while getopts dhn:r: option                                                                                
do
  case "${option}" in
    d) debug=0
       ;;
    r) reason=${OPTARG}
       ;;
    n) INTERNAL_IP4_DNS=${OPTARG}
       ;;
    h) echo -e "====\n\nExample: ${0} [-d -r {pre-init,connect,disconnect} -n 'nameserver1,nameserver2'-h]"
       exit 0;;
  esac
done

if [ -z "$reason" ]; then
        echo "this script must be called from vpnc or in with '-d -r [pre-init,connect,disconnect]'" 1>&2
        exit 1
fi

case "$reason" in
        pre-init)
                continue
                ;;
        connect)
                do_connect
                ;;
        disconnect)
                do_disconnect
                ;;
        *)
                echo "unknown reason '$reason'. Maybe vpnc-script is out of date" 1>&2
                exit 1
                ;;
esac

if [ ! -z "$debug" ]; then
    echo -e "\nScript finished in debug mode!"
else
    unset CISCO_DEF_DOMAIN
    export CISCO_SPLIT_INC
    export INTERNAL_IP4_DNS=${DNSMASQ_LISTEN}

    # Execute default script
    . /etc/vpnc/vpnc-script
fi
exit 0

